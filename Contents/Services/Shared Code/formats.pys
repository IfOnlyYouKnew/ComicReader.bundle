try:  # import fails from the URL service. this prevents log spam of exceptions.
    import rarfile
except Exception:
    pass
import zipfile
import szipfile
import os
import stat
import platform
import json
from io import open
from __builtin__ import type

FORMATS = ['.cbr', '.cbz', '.cb7', '.zip', '.rar', '.7z']

# constants https://github.com/Twoure/KissNetwork.bundle/blob/master/Contents/Services/Shared%20Code/domain.pys
BUNDLE_PATH = os.path.join(os.getcwd().lstrip('\?').rsplit('Plug-in Support')[0], 'Plug-ins', 'ComicReader.bundle')
MODULE_PATH = os.path.join(BUNDLE_PATH, 'Contents', 'Modules')
SUPPORT_PATH = os.path.join(BUNDLE_PATH.split('Plug-ins')[0], 'Plug-in Support', 'Data', 'com.plexapp.plugins.comicreader')
DB_FILE = os.path.join(SUPPORT_PATH, 'db.json')


def init_rar(path):
    if path:
        rarfile.UNRAR_TOOL = os.path.abspath(path)
    Log.Info('USING UNRAR EXECUTABLE: {}'.format(rarfile.UNRAR_TOOL))


def init_sz(path):
    if path:
        szipfile.SZ_TOOL = os.path.abspath(path)
    Log.Info('USING 7ZIP EXECUTABLE: {}'.format(szipfile.SZ_TOOL))


def build_url(archive, file, identifier):
    return 'comicreader://{}|{}|{}'.format(archive, file, identifier)


def split_url(url):
    return url.split('comicreader://')[-1].split('|')


def mime_type(filename):
    ext = os.path.splitext(filename)[-1]
    return {
        '.jpg': 'image/jpeg',
        '.jpeg': 'image/jpeg',
        '.png': 'image/png',
        '.gif': 'image/gif',
        '.tiff': 'image/tiff',
        '.bmp': 'image/bmp'
    }.get(ext, '*/*')


class ArchiveError(Exception):
    pass


def get_archive(archive):
    """Some archives are given the wrong extension, so try opening it until it works."""
    try:
        return rarfile.RarFile(archive)
    except Exception:
        pass
    try:
        return zipfile.ZipFile(archive)
    except Exception:
        pass
    try:
        return szipfile.SZipFile(archive)
    except Exception:
        pass

    raise ArchiveError


def get_image(archive, filename, user):
    a = get_archive(archive)
    try:
        db = {}
        with open(DB_FILE) as f:
            db = json.loads(f.read())
        db[user] = [archive, filename]
        with open(DB_FILE, 'wb') as f:
            f.write(json.dumps(db))
            Log.Info('wrote db file: {}'.format(db))
    except Exception as e:
        Log.Error('db_file: {} {}'.format(DB_FILE, e))
    return DataObject(a.read(filename), mime_type(filename))


def get_thumb(archive, filename):
    try:
        a = get_archive(archive)
    except ArchiveError as e:
        Log.Error(str(e))
    else:
        return DataObject(a.read(filename), mime_type(filename))


def get_cover(archive):
    try:
        a = get_archive(archive)
    except ArchiveError as e:
        Log.Error(str(e))
    else:
        x = sorted([x for x in a.namelist() if not x.endswith('/')])
        if x:
            return DataObject(a.read(x[0]), mime_type(x[0]))
